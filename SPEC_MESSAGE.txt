================================================================================
  PGE4NetTalk Client Lazarus - MESSAGE 송수신 규격
================================================================================

프로젝트: pge4nettalk_client_lazarus
작성일: 2025-10-21
목적: 사용자 메시지 송수신 방법에 대한 코드 규칙 정리

================================================================================
  1. MESSAGE 개요
================================================================================

메시지는 BlahBlah 프로토콜의 Function ID = 4 (OZFBlahBlahFunctionIDMessage)를
사용하여 송수신됩니다.

메시지 유형:
  - 1:1 대화: 특정 사용자에게 직접 메시지 전송
  - 그룹 대화: 그룹에 참여한 모든 사용자에게 메시지 전송

================================================================================
  2. MESSAGE 패킷 구조
================================================================================

[송신 패킷 구조]

  Service ID:   0x5454 (2 bytes) - OZFBlahBlahID
  Version:      1      (2 bytes) - OZFBlahBlahVersion
  Function ID:  4      (4 bytes) - OZFBlahBlahFunctionIDMessage
  Error Code:   0      (4 bytes) - OZFBlahBlahErrorCodeNone
  Arg Count:    2      (variable)

  Arguments:
    Arg 0: Target ID (String)
      - Type: 1 (String)
      - Value: 대상 사용자 ID 또는 그룹 이름

    Arg 1: Message Content (String)
      - Type: 1 (String)
      - Value: 메시지 내용

[수신 패킷 구조]

  Service ID:   0x5454 (2 bytes) - OZFBlahBlahID
  Version:      1      (2 bytes)
  Function ID:  4      (4 bytes) - OZFBlahBlahFunctionIDMessage
  Error Code:   0      (4 bytes)
  Arg Count:    3      (variable)

  Arguments:
    Arg 0: Target ID (String)
      - Type: 1 (String)
      - Value: 수신자 ID (자신 또는 상대방)

    Arg 1: Sender ID (String)
      - Type: 1 (String)
      - Value: 발신자 ID

    Arg 2: Message Content (String)
      - Type: 1 (String)
      - Value: 메시지 내용

================================================================================
  3. MESSAGE 송신 (Sending)
================================================================================

[코드 위치]
  파일: chat.pas
  메서드: TFormChat.ButtonSendClick (Line 85-105)

[송신 절차]

  1. 사용자 입력 받기
     - MemoMessage.Text에서 메시지 내용 읽기
     - TrimRight()로 오른쪽 공백 제거

  2. TOZFBlahBlah 패킷 생성
     - functionID = OZFBlahBlahFunctionIDMessage (4)
     - args 생성 (TStringList)

  3. Arguments 설정
     - args[0] = fTargetID  (대상 사용자 ID 또는 그룹 이름)
     - args[1] = message    (메시지 내용)

  4. 서버 전송
     - FormMain.SendData(tt, OZFBlahBlahID)

  5. 메모리 정리
     - FreeAndNil(tt)
     - MemoMessage.Clear

[코드 예제]

  procedure TFormChat.ButtonSendClick(Sender: TObject);
  var
    message: String;
    tt: TOZFBlahBlah;
  begin
    message := TrimRight(MemoMessage.Text);
    if message <> '' then
    begin
      // 1. 패킷 생성
      tt := TOZFBlahBlah.Create;
      tt.functionID := OZFBlahBlahFunctionIDMessage;
      tt.args := TStringList.Create;

      // 2. 인자 설정
      tt.args.add(fTargetID);  // 대상 ID
      tt.args.add(message);    // 메시지

      // 3. 전송
      FormMain.SendData(tt, OZFBlahBlahID);

      // 4. 정리
      FreeAndNil(tt);
      MemoMessage.Clear;
    end;
    MemoMessage.SetFocus;
  end;

[송신 데이터 흐름]

  User Input (MemoMessage)
    ↓
  ButtonSendClick()
    ↓
  Create TOZFBlahBlah Packet
    ↓
  Set Args[0] = Target ID
  Set Args[1] = Message
    ↓
  FormMain.SendData()
    ↓
  Network Send to Server

================================================================================
  4. MESSAGE 수신 (Receiving)
================================================================================

[코드 위치 1 - 메인 라우팅]
  파일: main.pas
  메서드: TFormMain.OnTalkTo (Line 455-461)

[코드 위치 2 - 메시지 표시]
  파일: chat.pas
  메서드: TFormChat.RecvMsg (Line 395-449)

[수신 절차]

  1. 서버로부터 패킷 수신
     - OnTalkTo에서 TOZFBlahBlah 패킷 파싱

  2. Function ID 확인
     - if tt.functionID = OZFBlahBlahFunctionIDMessage

  3. 발신자 확인
     - user := tt.args[0]  (Target/Receiver ID)
     - if user = fUser then user := tt.args[1]  (실제 발신자)

     해석:
       - args[0]이 자신(fUser)이면 → 자신이 보낸 메시지
       - args[0]이 타인이면 → 타인이 보낸 메시지

  4. 채팅 창 열기/가져오기
     - ChatForm(user).RecvMsg(tt)
     - 해당 사용자의 채팅 창이 없으면 새로 생성
     - 있으면 기존 창 가져오기

  5. 메시지 표시
     - RecvMsg()에서 실제 메시지 파싱 및 표시
     - args[0] = target (수신자)
     - args[1] = from (발신자)
     - args[2] = message (메시지 내용)

[코드 예제 - 메인 라우팅]

  // main.pas:455-461
  else if tt.functionID = OZFBlahBlahFunctionIDMessage then
  begin
    user := tt.args[0];
    if user = fUser then
      user := tt.args[1];  // 실제 대화 상대 ID
    ChatForm(user).RecvMsg(tt);  // 채팅 창 열고 메시지 전달
  end

[코드 예제 - 메시지 표시]

  // chat.pas:395-449
  procedure TFormChat.RecvMsg(tt: TOZFBlahBlah);
  var
    from, target, message: String;
    textAlign: TRVAlign;
    Chat: TChatLabel;
  begin
    if tt.functionID = OZFBlahBlahFunctionIDMessage then
    begin
      // 1. 인자 파싱
      target := tt.args[0];   // 수신자 ID
      from := tt.args[1];     // 발신자 ID
      message := tt.args[2];  // 메시지 내용

      if message = '' then
        exit;

      // 2. 발신자에 따라 정렬 결정
      if (from = fFromID) then
      begin
        textAlign := rvalLeft;   // 상대방 메시지: 왼쪽
        Chat.Skin := FormMain.LeftSkin;
        Chat.LeftSide := True;
      end
      else
      begin
        textAlign := rvalRight;  // 내 메시지: 오른쪽
        Chat.Skin := FormMain.RightSkin;
        Chat.LeftSide := False;
      end;

      // 3. 메시지 표시
      Chat.Caption := message;
      from := FormMain.GetNick(from);  // ID → 닉네임 변환
      fRichView.AddTextFromNewLine(from, 0, textAlign);
      fRichView.AddControl(Chat, textAlign);
      fRichView.FormatTail;
      fRichView.Invalidate;

      // 4. 창이 숨겨져 있으면 표시
      if not Showing then Show;

      // 5. 특수 키워드 팝업 처리 (apple, banana 등)
      if fPopupRegExpr.Exec(message) then
      begin
        match := fPopupRegExpr.Match[0];
        if match = 'apple' then showPopup('sample_image_apple.jpg');
        if match = 'banana' then showPopup('sample_image_banana.jpg');
      end;
    end
  end;

[수신 데이터 흐름]

  Server → Network Receive
    ↓
  OnTalkTo() (main.pas:455)
    ↓
  Parse TOZFBlahBlah Packet
    ↓
  Check Function ID = Message (4)
    ↓
  Determine Sender:
    if args[0] == fUser
      then sender = args[1]  (상대방이 보낸 것)
      else sender = args[0]  (내가 보낸 것)
    ↓
  ChatForm(sender)
    ↓
  RecvMsg(tt) (chat.pas:395)
    ↓
  Parse Args:
    target  = args[0]
    from    = args[1]
    message = args[2]
    ↓
  Display Message in RichView
    ↓
  Show Chat Window

================================================================================
  5. 채팅 창 관리 (Chat Window Management)
================================================================================

[코드 위치]
  파일: main.pas
  메서드: TFormMain.ChatForm (Line 926-951)

[채팅 창 관리 방식]

  - fChatUser: TStringList - 사용자 ID 목록
  - fChatForm: TObjectList - TFormChat 객체 목록
  - 1:1 매칭: fChatUser[i] ↔ fChatForm[i]

[채팅 창 생성/가져오기]

  function TFormMain.ChatForm(User: String; Add: Boolean = True): TFormChat;
  var
    index: Integer;
    form: TFormChat;
  begin
    fFormSync.Enter;  // 스레드 안전성

    // 1. 기존 창 찾기
    index := fChatUser.IndexOf(user);

    if index = -1 then
    begin
      // 2. 없으면 새로 생성 (Add = True일 때만)
      if Add then
      begin
        form := TFormChat.Create(nil);
        form.SetUser(fUser, user);  // 자신 ID, 상대 ID 설정
        fChatUser.Add(user);
        fChatForm.Add(form);
        form.Show;
      end else
        form := nil;
    end else begin
      // 3. 있으면 기존 창 반환
      form := fChatForm[index] as TFormChat;
    end;

    Result := form;
    fFormSync.Leave;
  end;

[채팅 창 닫기]

  파일: main.pas
  메서드: TFormMain.ChatClose (Line 953-)

  - fChatUser에서 해당 User 제거
  - fChatForm에서 해당 Form 제거
  - 메모리 자동 해제 (TFormChat.CloseAction = caFree)

================================================================================
  6. 특수 기능
================================================================================

[6.1 닉네임 변환]

  위치: main.pas
  메서드: TFormMain.GetNick

  기능:
    - 사용자 ID → 닉네임 변환
    - fNickList에서 조회
    - 없으면 ID 그대로 반환

[6.2 팝업 이미지 표시]

  위치: chat.pas:443-448

  기능:
    - 메시지 내용에 특정 키워드가 있으면 이미지 팝업
    - 정규표현식: fPopupRegExpr
    - 키워드: "apple" → sample_image_apple.jpg
    - 키워드: "banana" → sample_image_banana.jpg

  설정:
    - chat.pas:144-146에서 정규표현식 초기화
    - fPopupRegExpr.Expression := '(apple|banana)'

[6.3 메시지 정렬]

  - 내가 보낸 메시지: 오른쪽 정렬 (rvalRight)
  - 상대방이 보낸 메시지: 왼쪽 정렬 (rvalLeft)

  판단 기준:
    - from = fFromID (대화 상대 ID)이면 → 왼쪽 (상대방 메시지)
    - from ≠ fFromID이면 → 오른쪽 (내 메시지)

================================================================================
  7. 메시지 송수신 시퀀스 다이어그램
================================================================================

[1:1 메시지 송신]

  User                Chat Window         Main Form          Network
   |                      |                   |                 |
   |-- Type Message ----->|                   |                 |
   |                      |                   |                 |
   |-- Click Send ------->|                   |                 |
   |                  ButtonSendClick()       |                 |
   |                      |                   |                 |
   |                      |--- SendData() --->|                 |
   |                      |  (Target, Msg)    |                 |
   |                      |                   |--- Send Pkt --->|
   |                      |                   |  (BlahBlah)     |
   |                      |                   |                 |
   |                      |<-- Return --------|                 |
   |                      |                   |                 |
   |<-- Clear Input ------|                   |                 |

[1:1 메시지 수신]

  Server              Network            Main Form         Chat Window
   |                     |                   |                 |
   |--- Send Pkt ------->|                   |                 |
   | (Message from User) |                   |                 |
   |                     |--- OnTalkTo() --->|                 |
   |                     |   (TOZFBlahBlah)  |                 |
   |                     |                   |                 |
   |                     |              Parse Packet           |
   |                     |              Check Sender           |
   |                     |                   |                 |
   |                     |              ChatForm(user)         |
   |                     |                   |                 |
   |                     |                   |--- RecvMsg() -->|
   |                     |                   |   (tt)          |
   |                     |                   |            Parse Args
   |                     |                   |          Display Message
   |                     |                   |          Show Window
   |                     |                   |                 |
   |                     |                   |<-- Return ------|

================================================================================
  8. 그룹 메시지 (Group Message)
================================================================================

[그룹 메시지 송신]

  - 동일한 방식으로 전송
  - fTargetID에 그룹 이름 설정
  - args[0] = 그룹 이름
  - args[1] = 메시지 내용

[그룹 메시지 수신]

  - 동일한 수신 로직 사용
  - args[0] = 그룹 이름
  - args[1] = 발신자 ID
  - args[2] = 메시지 내용

  - ChatForm(그룹이름)으로 그룹 채팅 창 열기
  - 그룹 내 모든 사용자 메시지가 같은 창에 표시

[그룹 관련 다른 Function ID]

  - GroupJoin (5): 그룹 참여 - OZFBlahBlahFunctionIDGroupJoin
  - GroupInvite (6): 그룹 초대 - OZFBlahBlahFunctionIDGroupInvite
  - GroupExit (7): 그룹 퇴장 - OZFBlahBlahFunctionIDGroupExit

================================================================================
  9. 에러 처리
================================================================================

[송신 에러]

  - 빈 메시지 체크
    if message <> '' then ...

  - 네트워크 연결 상태는 FormMain.SendData()에서 처리

[수신 에러]

  - 빈 메시지 무시
    if message = '' then exit;

  - Function ID 불일치 시 무시
    if tt.functionID = OZFBlahBlahFunctionIDMessage then ...

[예외 상황]

  - args 개수 부족: 서버 프로토콜 오류 (크래시 가능)
  - 존재하지 않는 사용자: 서버에서 처리 (클라이언트는 표시만)
  - 네트워크 단절: FormMain.OnStatus()에서 처리

================================================================================
  10. 주요 변수 및 상수
================================================================================

[상수]

  OZFBlahBlahID = 0x5454
    - BlahBlah 서비스 ID

  OZFBlahBlahFunctionIDMessage = 4
    - 메시지 Function ID

  OZFBlahBlahArgTypeString = 1
    - 문자열 인자 타입

[전역 변수 (TFormMain)]

  fUser: String
    - 현재 로그인한 사용자 ID

  fNickList: TDictionary<String, String>
    - 사용자 ID → 닉네임 매핑

  fChatUser: TStringList
    - 열려있는 채팅 창의 사용자 ID 목록

  fChatForm: TObjectList
    - 열려있는 TFormChat 객체 목록

[지역 변수 (TFormChat)]

  fFromID: String
    - 대화 상대방 ID (1:1) 또는 그룹 이름

  fTargetID: String
    - 메시지 전송 대상 ID

  fRichView: TRichView
    - 메시지 표시 컴포넌트

================================================================================
  11. 코드 파일 구조
================================================================================

[main.pas]
  - TFormMain.OnTalkTo()
    → 메시지 수신 라우팅

  - TFormMain.ChatForm()
    → 채팅 창 생성/관리

  - TFormMain.ChatClose()
    → 채팅 창 닫기

  - TFormMain.GetNick()
    → 닉네임 변환

[chat.pas]
  - TFormChat.ButtonSendClick()
    → 메시지 전송

  - TFormChat.RecvMsg()
    → 메시지 수신 및 표시

  - TFormChat.SetUser()
    → 대화 상대 설정

  - TFormChat.showPopup()
    → 팝업 이미지 표시

[ozapi_pascal/ozfblahblah.pas]
  - TOZFBlahBlah 클래스
    → BlahBlah 프로토콜 패킷 구조

  - setup() 메서드
    → 패킷 직렬화 (송신)

  - Create(data, size) 생성자
    → 패킷 역직렬화 (수신)

================================================================================
  12. 테스트 시나리오
================================================================================

[송신 테스트]

  1. 1:1 메시지 전송
     - TreeView에서 사용자 더블클릭
     - 채팅 창 열림
     - 메시지 입력 후 Send
     - 서버로 전송 확인

  2. 그룹 메시지 전송
     - TreeView에서 그룹 더블클릭
     - 그룹 채팅 창 열림
     - 메시지 입력 후 Send
     - 그룹 멤버에게 전송 확인

[수신 테스트]

  1. 1:1 메시지 수신
     - 다른 사용자가 메시지 전송
     - 채팅 창 자동 열림
     - 메시지 왼쪽 정렬로 표시

  2. 내가 보낸 메시지 확인
     - 메시지 전송
     - 같은 채팅 창에 오른쪽 정렬로 표시

  3. 그룹 메시지 수신
     - 그룹 멤버가 메시지 전송
     - 그룹 채팅 창에 표시
     - 발신자별 정렬 확인

[특수 기능 테스트]

  1. 팝업 이미지
     - "apple" 메시지 전송
     - sample_image_apple.jpg 팝업 확인

  2. 닉네임 표시
     - 메시지 수신 시
     - ID 대신 닉네임 표시 확인

================================================================================
  13. 프로토콜 호환성
================================================================================

[C 프로젝트와의 호환성]

  ✓ Service ID: 동일 (0x5454)
  ✓ Version: 동일 (1)
  ✓ Function ID: 동일 (4 bytes, uint32)
  ✓ Error Code: 동일 (4 bytes, uint32)
  ✓ Argument Type: 동일 (1 byte per arg)
  ✓ Argument Count: 송신 2개, 수신 3개

[서버 요구사항]

  - BlahBlah 프로토콜 지원
  - Message Function (ID=4) 지원
  - Args 형식: [target, message] (송신)
  - Args 형식: [target, from, message] (수신)

================================================================================
  END OF SPEC_MESSAGE.txt
================================================================================
